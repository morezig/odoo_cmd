// Code generated for package bindata by go-bindata DO NOT EDIT. (@generated)
// sources:
// assets/css/app.css
// assets/done.html
// assets/error.html
// assets/index.html
// assets/js/app.js
package bindata

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsCssAppCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func assetsCssAppCssBytes() ([]byte, error) {
	return bindataRead(
		_assetsCssAppCss,
		"assets/css/app.css",
	)
}

func assetsCssAppCss() (*asset, error) {
	bytes, err := assetsCssAppCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/css/app.css", size: 0, mode: os.FileMode(438), modTime: time.Unix(1603875159, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDoneHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\x4b\x4f\x1b\x3f\x14\xc5\xf7\x48\x7c\x07\xff\xbd\x61\xc1\x3f\x63\xd2\x24\x2d\x6a\xc7\xa8\x80\x00\xd1\x07\x69\x45\x43\x54\x76\x8e\x7d\xc3\x38\xf1\x0b\xdf\x3b\x13\x86\x4f\x5f\x4d\x48\xda\x74\xd1\x2e\xea\x8d\x1f\xf7\xea\xd8\x3f\x9f\x53\xfe\x67\xa2\xa6\x36\x01\xab\xc8\xbb\x93\xfd\xbd\x72\x33\x77\x2b\x50\xe6\x64\x7f\x8f\x31\xc6\x4a\x0f\xa4\x98\xae\x54\x46\x20\xc9\x6b\x9a\xf7\x8e\xf9\x6f\xb5\xa0\x3c\x48\xde\x58\x58\xa5\x98\x89\x33\x1d\x03\x41\x20\xc9\x57\xd6\x50\x25\x0d\x34\x56\x43\x6f\xbd\xf9\x9f\xd9\x60\xc9\x2a\xd7\x43\xad\x1c\xc8\xfe\x4f\x25\x67\xc3\x92\x55\x19\xe6\x92\x57\x44\x09\xdf\x0a\xa1\x4d\x28\x16\x68\xc0\xd9\x26\x17\x01\x48\x84\xe4\xc5\x2c\x46\x42\xca\x2a\xbd\x1f\x15\x47\xc5\x91\x30\x16\x49\x68\xc4\x5f\x85\xc2\xdb\x50\x68\x44\xce\x32\x38\xc9\x91\x5a\x07\x58\x01\x10\x7f\xb9\xaa\x1b\x36\x10\x3c\x64\x4b\xad\xe4\x58\xa9\xc1\xf1\xb0\xb7\xba\xf0\x70\x7d\xd7\xf7\x1f\x6b\x7b\x93\xce\x0f\xaf\xc7\x67\x8b\xeb\x37\xea\xf4\xf9\x8b\xbe\xb8\x07\x30\x76\xd4\x4e\x47\xf3\x57\xed\xf8\x71\x34\x9a\x4e\x3f\xad\x6e\xae\x7c\xd3\x3c\x0d\x27\xbe\xdf\xe0\x12\x3e\x2f\x8e\x38\xd3\x39\x22\xc6\x6c\x1f\x6c\x90\x5c\x85\x18\x5a\x1f\x6b\xec\x00\x4b\xb1\xf9\xcf\xfd\xbd\x72\x16\x4d\xbb\x65\x46\x9d\x6d\x22\x86\x59\xff\x0b\xf4\x62\x97\x79\x56\x07\xe3\x60\x8d\xbe\xc0\xbf\x82\xa6\xc1\x70\xde\x9f\x4c\x08\x6f\x07\xab\xc7\xe7\x39\xc5\xd1\xea\xf4\xd4\x9b\x66\x71\x18\x71\x1c\x2e\xdb\xaf\x97\x29\x0d\x27\x6a\xf0\x80\xe2\xfe\x6e\xfa\xf4\x3a\x8e\xdb\xf4\x3d\x9e\x7f\xa8\xae\xae\x6e\x75\x7b\x78\xbc\x23\xfe\x27\xe2\x52\xbc\x90\x6d\x39\x8d\x6d\x98\x76\x0a\x51\xf2\x2e\x1b\xca\x06\xc8\x5b\xe3\xb7\x0d\x27\xdf\x14\x2e\xd9\x79\xf4\xc9\x01\x81\x29\x45\x77\xb6\xd3\x62\x43\xaa\x89\x75\x71\x95\x7c\x56\x13\xc5\xc0\x59\x0c\xda\x59\xbd\x94\xdc\x45\xad\xc8\xc6\x50\xac\x03\x74\x20\x0e\xde\x71\xd6\x28\x57\x83\xe4\x67\x4a\x2f\x39\x13\xdb\xa7\x6c\x64\x3b\x4f\x36\x4e\xac\xed\xe9\x82\xff\x23\x00\x00\xff\xff\xb6\x58\xa3\xac\x10\x03\x00\x00")

func assetsDoneHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDoneHtml,
		"assets/done.html",
	)
}

func assetsDoneHtml() (*asset, error) {
	bytes, err := assetsDoneHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/done.html", size: 784, mode: os.FileMode(438), modTime: time.Unix(1620807617, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsErrorHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\x5f\x4f\xdb\x30\x14\xc5\xdf\x91\xf8\x0e\x9e\x5f\x78\x60\x8d\xe9\xda\x6e\x68\x8b\xd1\x00\x01\x62\x7f\xe8\x26\x54\xaa\xf1\xe6\xda\xb7\xc4\xa9\x63\x1b\xdf\x9b\x84\xf0\xe9\xa7\x94\x76\xeb\x1e\xb6\x87\xe5\x25\xd7\x3a\xd6\xb1\x7f\x3e\x27\x7f\x65\x82\xa6\x2e\x02\x2b\xa8\x72\x27\xfb\x7b\xf9\xe6\xdf\x4f\xa0\xcc\xc9\xfe\x1e\x63\x8c\xe5\x15\x90\x62\xba\x50\x09\x81\x24\xaf\x69\x39\x38\xe6\x7f\x68\x5e\x55\x20\x79\x63\xa1\x8d\x21\x11\x67\x3a\x78\x02\x4f\x92\xb7\xd6\x50\x21\x0d\x34\x56\xc3\x60\xbd\x78\xcd\xac\xb7\x64\x95\x1b\xa0\x56\x0e\xe4\xf0\x97\x93\xb3\x7e\xc5\x8a\x04\x4b\xc9\x0b\xa2\x88\xef\x85\xd0\xc6\x67\x25\x1a\x70\xb6\x49\x99\x07\x12\x3e\x56\x62\x11\x02\x21\x25\x15\x3f\x4e\xb2\xa3\xec\x48\x18\x8b\x24\x34\xe2\x6f\x21\xab\xac\xcf\x34\x22\x67\x09\x9c\xe4\x48\x9d\x03\x2c\x00\x88\xbf\x1c\xd5\x7f\xd6\x13\x3c\x24\x4b\x9d\xe4\x58\xa8\xd1\xf1\x78\xd0\x5e\x54\x70\x7d\x37\xac\x3e\xd7\xf6\x26\x9e\x1f\x5e\x4f\xcf\xca\xeb\x77\xea\xf4\xf9\x9b\xbe\xb8\x07\x30\x76\xd2\xcd\x27\xcb\x37\xdd\xf4\x71\x32\x99\xcf\xbf\xb4\x37\x57\x55\xd3\x3c\x8d\x67\xd5\xb0\xc1\x15\x7c\x2d\x8f\x38\xd3\x29\x20\x86\x64\x1f\xac\x97\x5c\xf9\xe0\xbb\x2a\xd4\xd8\x03\xe6\x62\xf3\x9e\xfb\x7b\xf9\x22\x98\x6e\xcb\x8c\x3a\xd9\x48\x0c\x93\xfe\x1f\xe8\x72\x97\x79\x51\x7b\xe3\x60\x8d\x5e\xe2\x3f\x41\xe3\x68\xbc\x1c\xce\x66\x84\xb7\xa3\xf6\xf1\x79\x49\x61\xd2\x9e\x9e\x56\xa6\x29\x0f\x03\x4e\xfd\x65\xf7\xfd\x32\xc6\xf1\x4c\x8d\x1e\x50\xdc\xdf\xcd\x9f\xde\x86\x69\x17\x7f\x84\xf3\x4f\xc5\xd5\xd5\xad\xee\x0e\x8f\x77\xcc\xff\x46\x9c\x8b\x17\xb2\x2d\xa7\xb1\x0d\xd3\x4e\x21\x4a\xde\x77\x43\x59\x0f\x69\x1b\xfc\x76\xc3\xc9\x45\x4a\x21\xe5\xa2\x1f\x77\x14\xeb\x63\x4d\xac\x6f\xa9\xe4\x8b\x9a\x28\x78\xce\x82\xd7\xce\xea\x95\xe4\x2e\x68\x45\x36\xf8\x6c\xdd\x9b\x03\x71\xf0\x81\xb3\x46\xb9\x1a\x24\x3f\x53\x7a\xc5\x99\xd8\xde\x60\x63\xdb\x47\xb1\x09\x60\x9d\x4a\xdf\xf7\x9f\x01\x00\x00\xff\xff\xdf\x81\x77\x64\x07\x03\x00\x00")

func assetsErrorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsErrorHtml,
		"assets/error.html",
	)
}

func assetsErrorHtml() (*asset, error) {
	bytes, err := assetsErrorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/error.html", size: 775, mode: os.FileMode(438), modTime: time.Unix(1620807636, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x95\xcf\x6f\x1b\x45\x14\xc7\xef\x91\xf2\x3f\x0c\x73\x0d\xeb\x89\xed\x18\x22\xb4\x6b\x11\xaa\x36\x0d\x3f\xea\x42\x48\x23\x7a\x41\xb3\x33\x6f\xbd\xe3\xec\xce\x6c\x67\xde\xae\xb3\x3d\xc1\x85\x52\x85\xa8\x27\x90\x2a\x55\xaa\xe0\x14\x24\x24\x72\xae\x22\xfe\x1a\xec\xd0\xff\x02\xed\xae\x1d\x27\x4d\x08\x52\x95\x03\xe4\x10\xcf\xec\x7b\xfb\x7d\xef\xfb\xf1\x3c\x8f\xff\x8e\x34\x02\xcb\x0c\x48\x8c\x69\xd2\x5f\x5e\xf2\x67\x9f\xd5\x0a\xb8\xec\x2f\x2f\x11\x42\x88\x9f\x02\x72\x22\x62\x6e\x1d\x60\x40\x73\x8c\xbc\x75\x7a\x21\xa6\x79\x0a\x01\x2d\x14\x8c\x33\x63\x91\x12\x61\x34\x82\xc6\x80\x8e\x95\xc4\x38\x90\x50\x28\x01\x5e\xbd\x79\x97\x28\xad\x50\xf1\xc4\x73\x82\x27\x10\xb4\xcf\x94\x12\xa5\xf7\x48\x6c\x21\x0a\x68\x8c\x98\xb9\x0f\x18\x13\x52\xb7\x46\x4e\x42\xa2\x0a\xdb\xd2\x80\x4c\x67\x29\x0b\x8d\x41\x87\x96\x67\x1f\xf6\x5a\xab\xad\x55\x26\x95\x43\x26\x9c\x5b\x04\x5a\xa9\xd2\x2d\xe1\x1c\x25\x16\x92\x80\x3a\x2c\x13\x70\x31\x00\xd2\xa6\x54\xf5\xa7\x34\xc2\xd0\x2a\x2c\x03\xea\x62\xde\x5d\x5f\xf3\xc6\xb7\x53\xd8\x7a\xd0\x4e\x3f\xc9\xd5\xbd\xec\xd6\xca\xd6\xe0\xa3\xd1\xd6\xfb\x7c\xe3\xf1\x7d\x71\xfb\x21\x80\x54\xbd\x72\xb7\x17\x75\xca\xc1\xa3\x5e\x6f\x77\xf7\xd3\xf1\xbd\xcd\xb4\x28\xf6\xd7\x76\xd2\x76\xe1\xf6\xe0\xb3\xd1\x2a\x25\xc2\x1a\xe7\x8c\x55\x43\xa5\x03\xca\xb5\xd1\x65\x6a\x72\x57\x19\xf4\xd9\x8c\xe7\xf2\x92\x1f\x1a\x59\xce\x3d\x3b\x61\x55\x86\xc4\x59\xf1\x36\xa6\x47\xe7\x3d\x87\xb9\x96\x09\xd4\xd6\x47\xee\x5a\xa3\x59\x77\x2d\x6a\xef\xec\xa0\xdb\xee\x8e\x1f\x3d\x8e\xd0\xf4\xc6\x1b\x1b\xa9\x2c\x46\x2b\xc6\x0d\xf4\x9d\xf2\xf3\x3b\x59\xb6\xb6\xc3\xbb\x43\xc7\x1e\x3e\xd8\xdd\x7f\xcf\x0c\xca\xec\x2b\x73\xeb\xe3\x78\x73\x73\x5b\x94\x2b\xeb\xe7\xc4\xff\xc9\xb1\xcf\x1a\x67\x73\x9f\x52\x15\x44\x24\xdc\xb9\x80\x56\x67\x83\x2b\x0d\x76\xfe\xc5\xd7\x09\x91\x1a\xe6\x16\xe6\x39\x08\xfb\xe8\x09\xd0\x78\x31\xab\xce\xbc\xdb\xee\x4f\xfe\xf8\x61\xf2\xec\xf8\xf5\x93\xc3\xc9\x8f\x2f\xa7\x2f\x0e\x27\x07\xcf\x7d\x76\xb7\x7d\x5e\x8e\x35\x7a\x35\xf0\x45\x0d\x63\x53\x92\x02\xc6\x46\x06\xf4\xfe\x60\xfb\x4b\x4a\xb8\x40\x65\x74\x40\x99\x91\xc6\xb0\x66\x77\xa9\xe2\xb9\xe6\xd3\xd0\xeb\xbe\x19\x6f\x0e\x2f\x0f\x21\x21\x91\xb1\x01\xcd\xc6\x92\x2e\xcc\x26\x5e\x87\x54\xff\xab\xe2\x5e\x9d\x45\xfb\x93\xdf\xbf\x3b\xfd\xe5\xc4\x67\xf5\xf6\x2a\x35\xa5\xb3\x1c\x49\x35\x99\x01\xcd\xb8\x73\x63\x63\x17\x9a\xb5\x52\x45\xd1\x9a\x84\x12\x25\x67\x15\x9b\x19\xac\x96\x6f\xf6\xcf\xa4\x2a\xae\xf1\xd4\xe8\xc5\x20\xf6\xc8\x62\xe9\x29\x9d\x28\x0d\x57\x7a\x6d\xba\xbb\xf4\xb6\x57\x3f\xa7\xb3\xb6\x2d\x97\xca\xcc\xbb\x72\xb6\xf8\x9a\x0b\x6c\xba\x6d\x94\xbf\xa8\xe2\x6d\x4a\x0a\x9e\xe4\x10\x50\x70\x22\xbb\x06\xec\xe5\x62\x0d\xca\x86\xf8\x05\xc5\x7e\x73\x2e\x26\x87\xc7\x7f\xfd\x7c\x34\xfd\xf5\xe5\xd5\x98\xff\xc3\x50\x3a\x67\x50\xaa\x43\x79\x13\x50\x3a\x73\x28\x7f\x9e\xbc\xaa\xe6\xe5\xf9\xd1\xff\x0e\x4a\xf7\x0c\xca\x50\xe1\x4d\x30\xe9\xd2\xfe\xf4\xe0\xe9\xf4\xa7\xe3\xd3\xa7\xdf\x4f\x5f\xfc\x76\x7a\x74\x30\x39\x79\xf6\x76\x58\xa4\x37\xb4\x4a\x92\x21\xcf\xbc\x0e\x91\x5e\x2a\xbd\x28\x81\x7d\x32\xca\x1d\xaa\xa8\xf4\x66\x97\x61\xf5\x1c\xf4\xa5\xe9\xac\xc5\xc2\x1c\xd1\xe8\x19\x0f\x97\x87\xa9\xc2\xb3\x71\x0f\x51\x93\x10\xb5\x97\x59\x95\x72\x5b\xd2\xfe\xeb\x6f\xbe\x9d\x3c\x79\xe5\xb3\xe6\xa5\x7f\xe9\xd5\x67\x15\x8a\xf9\xcf\xf0\x2c\xe8\xb3\xd9\x1d\x54\x5f\x4c\xd5\x95\xff\x77\x00\x00\x00\xff\xff\xd5\x2e\x8b\x95\x0a\x08\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 2058, mode: os.FileMode(438), modTime: time.Unix(1620807834, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsAppJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func assetsJsAppJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsAppJs,
		"assets/js/app.js",
	)
}

func assetsJsAppJs() (*asset, error) {
	bytes, err := assetsJsAppJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/app.js", size: 0, mode: os.FileMode(438), modTime: time.Unix(1603875153, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/css/app.css": assetsCssAppCss,
	"assets/done.html":   assetsDoneHtml,
	"assets/error.html":  assetsErrorHtml,
	"assets/index.html":  assetsIndexHtml,
	"assets/js/app.js":   assetsJsAppJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"app.css": &bintree{assetsCssAppCss, map[string]*bintree{}},
		}},
		"done.html":  &bintree{assetsDoneHtml, map[string]*bintree{}},
		"error.html": &bintree{assetsErrorHtml, map[string]*bintree{}},
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{}},
		"js": &bintree{nil, map[string]*bintree{
			"app.js": &bintree{assetsJsAppJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
